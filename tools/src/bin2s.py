#!/usr/bin/env python3

import argparse
import os
import os.path
import re
import string
import sys
from textwrap import dedent as d

TEMPLATES = {
    'gas': {
        'start': d('''\
            /* Generated by bin2s.py - do not edit */
            .section    .rodata.{symbol}
            .balign     {align}
            .global     {symbol}
            .type       {symbol} STT_OBJECT
            {symbol}:
            '''),

        'line': '    .byte    {}\n',

        'end': d('''\
            .global     {symbol}_end
            {symbol}_end:
            .size       {symbol}, . - {symbol}
            .previous
            ''')
    },

    'apple-llvm': {
        'start': d('''\
            /* Generated by bin2s.py - do not edit */
            .const_data
            .balign     {align}
            .global     {symbol}
            {symbol}:
            '''),

        'line': '    .byte    {}\n',

        'end': d('''\
            .global     {symbol}_end
            {symbol}_end:
            ''')
    },

    'header': d('''\
        /* Generated by bin2s.py - do not edit */
        #pragma once
        #include <stddef.h>
        #include <stdint.h>

        extern const uint8_t {symbol}[];
        extern const uint8_t {symbol}_end[];

        #if __cplusplus >= 201103L
        static constexpr size_t {symbol}_size = {size};
        #else
        static const size_t {symbol}_size = {size};
        #endif
        ''')
}


def underscorify(s, apple):
    if not s:
        return s

    if s[0] in string.digits or apple:
        s = '_' + s

    return re.sub('[^a-zA-Z0-9_]', '_', s)

def filesize(f):
    old = f.tell()
    f.seek(0, os.SEEK_END)
    size = f.tell()
    f.seek(old)
    return size

def dump_template(symbol, align, size, inf, out, header, format):
    template = TEMPLATES[format]
    out.write(template['start'].format(symbol=symbol, align=align))

    # TODO: Look man, I don't know
    l = inf.read()
    chunks = [l[i:i + 8] for i in range(0, len(l), 8)]

    for chunk in chunks:
        f = ('0x{:02X}, ' * (len(chunk) - 1)) + '0x{:02X}'
        bytez = f.format(*chunk)
        out.write(template['line'].format(bytez))

    out.write(template['end'].format(symbol=symbol))

    if header:
        header.write(TEMPLATES['header'].format(symbol=symbol, size=size))

def main():
    p = argparse.ArgumentParser()

    p.add_argument('file', type=argparse.FileType('rb'))
    p.add_argument('-f', '--format', choices=['gas', 'apple-llvm', 'c'], default='gas')
    p.add_argument('--apple-llvm', action='store_const', dest='format', const='apple-llvm')
    p.add_argument('-o', '--output', type=argparse.FileType('w+'), default=sys.stdout)
    p.add_argument('-a', '--align', type=int, default=4)
    p.add_argument('-H', '--header', type=argparse.FileType('w+'))

    opts = p.parse_args()

    f = opts.file
    symbol = underscorify(os.path.basename(f.name), opts.format == 'apple-llvm')

    size = filesize(f)

    align = opts.align

    dump_template(symbol, align, size, f, opts.output, opts.header, opts.format)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(e, file=sys.stderr)
        exit(1)
